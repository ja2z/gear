import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Vite plugin for automatic image optimization
 * Converts PNG images to WebP and generates LQIP (Low Quality Image Placeholder) versions
 */
export function imageOptimizationPlugin() {
  const plugin = {
    name: 'image-optimization',
    buildStart() {
      plugin.optimizeImages();
    },
    async optimizeImages() {
      const imagesDir = path.join(__dirname, '../public/images');
      const outputDir = path.join(__dirname, '../dist/images');
      
      // Ensure output directory exists
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }
      
      try {
        // Check if images directory exists
        if (!fs.existsSync(imagesDir)) {
          console.log('Images directory does not exist, skipping image optimization');
          return;
        }
        
        // Read all PNG files in the images directory
        const files = fs.readdirSync(imagesDir);
        const pngFiles = files.filter(file => path.extname(file).toLowerCase() === '.png');
        
        console.log(`Found ${pngFiles.length} PNG files to optimize`);
        
        // Process each PNG file
        for (const file of pngFiles) {
          const inputPath = path.join(imagesDir, file);
          const baseName = path.parse(file).name;
          
          try {
            // Generate WebP version (high quality for mobile)
            const webpPath = path.join(outputDir, `${baseName}.webp`);
            await sharp(inputPath)
              .webp({ quality: 85, effort: 6 })
              .toFile(webpPath);
            
            // Generate LQIP version (very low quality for instant loading)
            const lqipPath = path.join(outputDir, `${baseName}.lqip.webp`);
            await sharp(inputPath)
              .resize(20, null, { 
                withoutEnlargement: true,
                fit: 'inside'
              })
              .webp({ quality: 20, effort: 1 })
              .blur(0.5)
              .toFile(lqipPath);
            
            console.log(`Optimized: ${file} â†’ ${baseName}.webp + ${baseName}.lqip.webp`);
            
          } catch (error) {
            console.error(`Error optimizing ${file}:`, error);
          }
        }
        
        // Copy non-PNG images as-is
        const otherFiles = files.filter(file => path.extname(file).toLowerCase() !== '.png');
        for (const file of otherFiles) {
          const inputPath = path.join(imagesDir, file);
          const outputPath = path.join(outputDir, file);
          fs.copyFileSync(inputPath, outputPath);
          console.log(`Copied: ${file}`);
        }
        
        // Generate optimized image list
        plugin.generateOptimizedImageList(outputDir);
        
      } catch (error) {
        console.error('Error during image optimization:', error);
      }
    },
    
    generateOptimizedImageList(outputDir) {
      const listFile = path.join(__dirname, '../src/utils/optimizedImageList.js');
      
      try {
        const files = fs.readdirSync(outputDir);
        const webpFiles = files.filter(file => file.endsWith('.webp') && !file.endsWith('.lqip.webp'));
        
        const imageData = webpFiles.map(file => {
          const baseName = path.parse(file).name;
          const lqipFile = `${baseName}.lqip.webp`;
          const hasLqip = files.includes(lqipFile);
          
          return {
            original: `/images/${baseName}.png`,
            webp: `/images/${file}`,
            lqip: hasLqip ? `/images/${lqipFile}` : null
          };
        });
        
        const content = `// Auto-generated list of optimized images
// This file is generated by the image optimization plugin
// Do not edit manually

export const OPTIMIZED_IMAGES = ${JSON.stringify(imageData, null, 2)};

// Helper function to get image data by original path
export const getImageData = (originalPath) => {
  return OPTIMIZED_IMAGES.find(img => img.original === originalPath);
};

// Helper function to get all WebP image paths
export const getWebPImages = () => {
  return OPTIMIZED_IMAGES.map(img => img.webp);
};

// Helper function to get all LQIP image paths
export const getLQIPImages = () => {
  return OPTIMIZED_IMAGES.map(img => img.lqip).filter(Boolean);
};
`;
        
        fs.writeFileSync(listFile, content);
        console.log(`Generated optimized image list with ${imageData.length} images`);
        
      } catch (error) {
        console.error('Error generating optimized image list:', error);
      }
    }
  };
  
  return plugin;
}
